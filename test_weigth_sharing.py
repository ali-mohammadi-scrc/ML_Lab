# -*- coding: utf-8 -*-
"""test_weigth_sharing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11ZhnVOjkM2xG3-0azymGqjxogjiCHdvx
"""

from __future__ import print_function
import keras
import tensorflow
from keras.layers import Dense, Conv2D, BatchNormalization, Activation
from keras.layers import AveragePooling2D, Input, Flatten
from tensorflow.keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint, LearningRateScheduler
from keras.callbacks import ReduceLROnPlateau
from keras.preprocessing.image import ImageDataGenerator
from keras.regularizers import l2
from keras import backend as K
from keras.models import Model
from keras.datasets import cifar10
import numpy as np
import tensorflow as tf
import os
import tensorflow.python.ops.numpy_ops.np_config as np_config
np_config.enable_numpy_behavior()

# (x_train, y_train), (x_test, y_test) = cifar10.load_data()
# print('x_train shape:', x_train.shape)
# print(x_train.shape[0], 'train samples')
# print(x_test.shape[0], 'test samples')
# print('y_train shape:', y_train.shape)

# batch_size = 128  # orig paper trained all networks with batch_size=128
# epochs = 200
# data_augmentation = True
# num_classes = 10

# # Subtracting pixel mean improves accuracy
# subtract_pixel_mean = True

# input_shape = x_train.shape[1:]

# # Normalize data.
# x_train = x_train.astype('float32') / 255
# x_test = x_test.astype('float32') / 255

# # If subtract pixel mean is enabled
# if subtract_pixel_mean:
#     x_train_mean = np.mean(x_train, axis=0)
#     x_train -= x_train_mean
#     x_test -= x_train_mean

# print('x_train shape:', x_train.shape)
# print(x_train.shape[0], 'train samples')
# print(x_test.shape[0], 'test samples')
# print('y_train shape:', y_train.shape)

# # import random
# # bias_type = "remove_one_class"
# # if(bias_type == "remove_one_class"):
# #   label = 8 #the class whose training data to be removed (cat)
# #   percent_remove = 60
# #   samples = ((100-percent_remove) * 5000)/100
# #   indices = np.where(y_train==label)[0]
# #   print(indices.shape)
# #   rem_indices = random.sample(range(5000),int(samples))
# #   indices = np.delete(indices, rem_indices)
# #   print(indices.shape)
# #   x_train = np.delete(x_train,indices,axis=0)
# #   y_train = np.delete(y_train,indices)

# print('x_train shape:', x_train.shape)
# print(x_train.shape[0], 'train samples')
# print(x_test.shape[0], 'test samples')
# print('y_train shape:', y_train.shape)

# from tensorflow.keras.utils import to_categorical
# # Convert class vectors to binary class matrices.
# y_train = to_categorical(y_train, num_classes)
# y_test = to_categorical(y_test, num_classes)
def lr_schedule(epoch):
    """Learning Rate Schedule

    Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.
    Called automatically every epoch as part of callbacks during training.

    # Arguments
        epoch (int): The number of epochs

    # Returns
        lr (float32): learning rate
    """
    lr = 1e-3
    if epoch > 180:
        lr *= 0.5e-3
    elif epoch > 160:
        lr *= 1e-3
    elif epoch > 120:
        lr *= 1e-2
    elif epoch > 80:
        lr *= 1e-1
    print('Learning rate: ', lr)
    return lr

# from google.colab import drive
# drive.mount('/content/drive')

def create_shared_weights(conv1, conv2, in_shape1, in_shape2):
    with K.name_scope(conv1.name):
        conv1.build(in_shape1)
    with K.name_scope(conv2.name):
        conv2.build(in_shape2)
    conv2.kernel = conv1.kernel
    conv2.bias = conv1.bias
    conv2._trainable_weights = []
    conv2._trainable_weights.append(conv2.kernel)
    conv2._trainable_weights.append(conv2.bias)

def resnet_v1(input_shape, depth, num_classes=10):
    """ResNet Version 1 Model builder [a]

    Stacks of 2 x (3 x 3) Conv2D-BN-ReLU
    Last ReLU is after the shortcut connection.
    At the beginning of each stage, the feature map size is halved (downsampled)
    by a convolutional layer with strides=2, while the number of filters is
    doubled. Within each stage, the layers have the same number filters and the
    same number of filters.
    Features maps sizes:
    stage 0: 32x32, 16
    stage 1: 16x16, 32
    stage 2:  8x8,  64
    The Number of parameters is approx the same as Table 6 of [a]:
    ResNet20 0.27M
    ResNet32 0.46M
    ResNet44 0.66M
    ResNet56 0.85M
    ResNet110 1.7M

    # Arguments
        input_shape (tensor): shape of input image tensor
        depth (int): number of core convolutional layers
        num_classes (int): number of classes (CIFAR10 has 10)

    # Returns
        model (Model): Keras model instance
    """
    if (depth - 2) % 6 != 0:
        raise ValueError('depth should be 6n+2 (eg 20, 32, 44 in [a])')
    # Start model definition.
    num_filters = 16
    num_res_blocks = int((depth - 2) / 6)

    inputs = Input(shape=input_shape)
    # conv = Conv2D(num_filters,
    #               kernel_size=kernel_size,
    #               strides=strides,
    #               padding='same',
    #               kernel_initializer='he_normal',
    #               kernel_regularizer=l2(1e-4))
    conv0 = Conv2D(num_filters, kernel_size=3, strides=1, padding='same', kernel_initializer='he_normal', kernel_regularizer=l2(1e-4))
    x = conv0(inputs)
    x = BatchNormalization()(x)
    x = Activation('relu')(x)
    out_shape = conv0.output_shape
    print(out_shape)
    # x = resnet_layer(inputs=inputs)
    # Instantiate the stack of residual units
    for stack in range(3):
    
        for res_block in range(num_res_blocks):
            strides = 1
            if stack > 0 and res_block == 0:  # first layer but not first stack
                strides = 2  # downsample
            # y = resnet_layer(inputs=x,
            #                  num_filters=num_filters,
            #                 strides=strides)
            conv1 = Conv2D(num_filters,
                    kernel_size=3,
                    strides=strides,
                    padding='same',
                    kernel_initializer='he_normal',
                    kernel_regularizer=l2(1e-4))
            
            conv2 = Conv2D(num_filters,
                    kernel_size=3,
                    strides=1,
                    padding='same',
                    kernel_initializer='he_normal',
                    kernel_regularizer=l2(1e-4))
            
            if(stack==0 or (stack>0 and res_block>0)):
              out_shape = x.shape
              in_shape1 = out_shape
              in_shape2 = out_shape
              # if(stack>0):
              #   in_shape2[1] = in_shape1[1]/2
              #   in_shape2[2] = in_shape1[2]/2  
              #   in_shape2[3] = in_shape1[3]*2 
              # print("in_shape1",in_shape1)
              # print("in_shape2",in_shape2)    
              
              
              with K.name_scope(conv1.name):
                  conv1.build(in_shape1)
              y = conv1(x)
              # w = y.get_weights()[0]
              y = BatchNormalization()(y)
              y = Activation('relu')(y)

              in_shape2 = conv1.output_shape
              
              with K.name_scope(conv2.name):
                  conv2.build(in_shape2)
              conv2.kernel = conv1.kernel
              conv2.bias = conv1.bias
              conv2._trainable_weights = []
              conv2._trainable_weights.append(conv2.kernel)
              conv2._trainable_weights.append(conv2.bias)
              # create_shared_weights(conv1, conv2, in_shape1, in_shape2)

              print(conv2.weights == conv1.weights)  # True   
              
              y = conv2(y)
              # y.set_weights(w)
              y = BatchNormalization()(y)
              # y = Activation('relu')(y) 
              # y = resnet_layer(inputs=y,
              #                  num_filters=num_filters,
              #                  activation=None)
            else:
              y = conv1(x)
              # w = y.get_weights()[0]
              y = BatchNormalization()(y)
              y = Activation('relu')(y)

              y = conv2(y)
              # y.set_weights(w)
              y = BatchNormalization()(y)
              
            if stack > 0 and res_block == 0:  # first layer but not first stack
                # linear projection residual shortcut connection to match
                # changed dims
                conv3 = Conv2D(num_filters,
                           kernel_size=1,
                           strides=strides,
                           padding='same',
                           kernel_initializer='he_normal',
                           kernel_regularizer=l2(1e-4))
                x = conv3(x)
                # out_shape = conv3.output_shape
                # print("inner loop",out_shape)
                # x = resnet_layer(inputs=x,
                #                  num_filters=num_filters,
                #                  kernel_size=1,
                #                  strides=strides,
                #                  activation=None,
                #                  batch_normalization=False)
            x = keras.layers.add([x, y])
            x = Activation('relu')(x)
        num_filters *= 2

    # Add classifier on top.
    # v1 does not use BN after last shortcut connection-ReLU
    x = AveragePooling2D(8)(x)
    y = Flatten()(x)
    outputs = Dense(num_classes,
                    activation='softmax',
                    kernel_initializer='he_normal')(y)

    # Instantiate model.
    model = Model(inputs=inputs, outputs=outputs)
    return model

# model_path = '/content/drive/MyDrive/Colab Notebooks/saved_models/cifar10_Sharesnet20_biasShip60T.h5'
# METRICS = [ 
#       keras.metrics.CategoricalAccuracy(name='accuracy')
# ]
# model = resnet_v1(input_shape=input_shape, depth=20)
# model.compile(loss='categorical_crossentropy', metrics=METRICS)
# model.load_weights(model_path)
# w = np.array(model.get_weights(), dtype= np.object)
# print(w.shape)

# from matplotlib import pyplot as plt
# import matplotlib as mpl
# import sklearn
# from sklearn.preprocessing import LabelBinarizer
# from sklearn.metrics import roc_curve, auc, roc_auc_score

# colors = plt.rcParams['axes.prop_cycle'].by_key()['color']
# mpl.rcParams['figure.figsize'] = (12, 10)

# target= ['airplane', 'automobile', 'bird', 'cat', 'deer',
#           'dog', 'frog', 'horse', 'ship', 'truck']

# # set plot figure size
# fig, c_ax = plt.subplots(1,1, figsize = (12, 8))

# # function for scoring roc auc score for multi-class
# def multiclass_roc_auc_score(y_test, y_pred, average="macro"):
#     # lb = LabelBinarizer()
#     # lb.fit(y_test)
#     # y_test = lb.transform(y_test)
#     # y_pred = lb.transform(y_pred)

#     for (idx, c_label) in enumerate(target):
#         fpr, tpr, thresholds = roc_curve(y_test, y_pred[:,idx], pos_label=idx)
#         c_ax.plot(fpr, tpr, label = '%s (AUC:%0.2f)'  % (c_label, auc(fpr, tpr)))
#     c_ax.plot(fpr, fpr, 'b-', label = 'Random Guessing')
#     return roc_auc_score(y_test, y_pred, multi_class='ovr')

# # y_pred = model.predict(x_train)
# # y_pred = y_pred.argmax(axis=-1)
# # y_train = y_train.argmax(axis=-1)
# # print('ROC AUC score for training data :', multiclass_roc_auc_score(y_train, y_pred))

# # c_ax.legend()
# # c_ax.set_xlabel('False Positive Rate')
# # c_ax.set_ylabel('True Positive Rate')
# # plt.show()

# y_pred = model.predict(x_test)
# # y_pred = y_pred.max(axis=1)
# print(y_pred)
# pred_labels = y_pred.max(axis=1)
# y_test = y_test.argmax(axis=-1)
# print(y_test)
# print('ROC AUC score for test data :', multiclass_roc_auc_score(y_test, y_pred))

# c_ax.legend()
# c_ax.set_xlabel('False Positive Rate')
# c_ax.set_ylabel('True Positive Rate')
# plt.show()
# # for layer in model.layers:
# #     print(layer.name)
# # model.summary()
# # tf.keras.utils.plot_model(model, "mini_resnet.png", show_shapes=True)

# # w = model.get_layer('conv2d_1').get_weights()
# # print(w[0].shape)
# # model.get_layer('conv2d_2').set_weights(w)

# # w = model.get_layer('conv2d_8').get_weights()
# # print(w[0].shape)
# # model.get_layer('conv2d_9').set_weights(w)

# model.compile(loss='categorical_crossentropy',
#               optimizer=Adam(lr=lr_schedule(0)),
#               metrics=METRICS)
# # for layer in model.layers:
# #     print(layer.name)
# model.summary()



# model_name = '/content/drive/MyDrive/Colab Notebooks/saved_models/cifar10_Sharesnet20_biasShip60T.h5'
# # Prepare callbacks for model saving and for learning rate adjustment.
# checkpoint = ModelCheckpoint(filepath=model_name,
#                              monitor='val_accuracy',
#                              verbose=1,
#                              save_best_only=True)

# lr_scheduler = LearningRateScheduler(lr_schedule)

# lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),
#                                cooldown=0,
#                                patience=5,
#                                min_lr=0.5e-6)

# callbacks = [checkpoint, lr_reducer, lr_scheduler]

# print('Not using data augmentation.')
# history = model.fit(x_train, y_train,
#           batch_size=128,
#           epochs=epochs,
#           validation_data=(x_test, y_test),
#           shuffle=True,
#           callbacks=callbacks)

# # import numpy as np
# # from keras.models import load_model
# # w = model.get_layer('conv2d_124').get_weights()
# # print(w[0].shape)
# # w1 = model.get_layer('conv2d_125').get_weights()
# # print((w[1]==w1[1]).all())
# # w = model.get_layer('conv2d_130').get_weights()
# # print(w[0].shape)
# # w1 = model.get_layer('conv2d_131').get_weights()
# # print((w[1]==w1[1]).all())
# # model.predict(x_test).argmax(axis=-1)
# # # model.save('my_model_weights.h5')
# # model2 = load_model('my_model_weights.h5')
# # # # model2 = build_model()
# # # # model2.load_weights('my_model_weights.h5')
# # model2.summary()

# #Parameters Sharing in Residual Neural Networks

# from matplotlib import pyplot as plt
# import matplotlib as mpl
# import sklearn
# from sklearn.preprocessing import LabelBinarizer
# from sklearn.metrics import roc_curve, auc, roc_auc_score

# model_name = '/content/drive/MyDrive/Colab Notebooks/saved_models/cifar10_Sharesnet20_biasShip60W.h5'
# model.save_weights(model_name)
# # path = "cifar-10-python/cifar-10-batches-py"
# # (x_train, y_train), (x_test, y_test) = cifar10.load_data()
# # # print('x_train shape:', x_train.shape)
# # # print(x_train.shape[0], 'train samples')
# # # print(x_test.shape[0], 'test samples')
# # # print('y_train shape:', y_train.shape)

# # #Central cropping the image to 75%of it's normal extents
# # x_train = tf.image.central_crop(x_train,0.75)
# # x_test = tf.image.central_crop(x_test,0.75)

# plt.plot(history.history['accuracy'])
# plt.plot(history.history['val_accuracy'])
# plt.title('model accuracy')
# plt.ylabel('accuracy')
# plt.xlabel('epoch')
# plt.legend(['train', 'val'], loc='upper left')
# plt.show()

# plt.plot(history.history['loss'])
# plt.plot(history.history['val_loss'])
# plt.title('model loss')
# plt.ylabel('loss')
# plt.xlabel('epoch')
# plt.legend(['train', 'val'], loc='upper left')
# plt.show()

# # scores = model.evaluate(x_test, y_test, verbose=1)
# # print('Test loss:', scores[0])
# # print('Test accuracy:', scores[1])

# colors = plt.rcParams['axes.prop_cycle'].by_key()['color']
# mpl.rcParams['figure.figsize'] = (12, 10)

# target= ['airplane', 'automobile', 'bird', 'cat', 'deer',
#           'dog', 'frog', 'horse', 'ship', 'truck']

# # set plot figure size
# fig, c_ax = plt.subplots(1,1, figsize = (12, 8))

# # function for scoring roc auc score for multi-class
# def multiclass_roc_auc_score(y_test, y_pred, average="macro"):
#     lb = LabelBinarizer()
#     lb.fit(y_test)
#     y_test = lb.transform(y_test)
#     y_pred = lb.transform(y_pred)

#     for (idx, c_label) in enumerate(target):
#         fpr, tpr, thresholds = roc_curve(y_test[:,idx].astype(int), y_pred[:,idx])
#         c_ax.plot(fpr, tpr, label = '%s (AUC:%0.2f)'  % (c_label, auc(fpr, tpr)))
#     c_ax.plot(fpr, fpr, 'b-', label = 'Random Guessing')
#     return roc_auc_score(y_test, y_pred, average=average)

# # y_pred = model.predict(x_train)
# # y_pred = y_pred.argmax(axis=-1)
# # y_train = y_train.argmax(axis=-1)
# # print('ROC AUC score for training data :', multiclass_roc_auc_score(y_train, y_pred))

# # c_ax.legend()
# # c_ax.set_xlabel('False Positive Rate')
# # c_ax.set_ylabel('True Positive Rate')
# # plt.show()

# y_pred = model.predict(x_test)
# y_pred = y_pred.argmax(axis=-1)
# print(y_pred)
# y_test = y_test.argmax(axis=-1)
# print(y_test)
# print('ROC AUC score for test data :', multiclass_roc_auc_score(y_test, y_pred))

# c_ax.legend()
# c_ax.set_xlabel('False Positive Rate')
# c_ax.set_ylabel('True Positive Rate')
# plt.show()